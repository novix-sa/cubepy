{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Cubepy \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent elementum commodo pretium. Nullam bibendum congue sapien in ultricies. Pellentesque nec consequat nulla. Vivamus eros nibh, gravida at fringilla gravida, consectetur quis magna. Fusce eu turpis eu sapien viverra fringilla eu at purus. Sed tristique arcu non dui auctor maximus. Praesent eget ante odio. Ut convallis tellus molestie, iaculis leo eget, rhoncus tellus. Suspendisse pharetra aliquet ex sit amet tincidunt. Nullam feugiat sed nulla vel volutpat. docs Esto lo agrego JD agregado por fabian","title":"About Cubepy"},{"location":"#about-cubepy","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent elementum commodo pretium. Nullam bibendum congue sapien in ultricies. Pellentesque nec consequat nulla. Vivamus eros nibh, gravida at fringilla gravida, consectetur quis magna. Fusce eu turpis eu sapien viverra fringilla eu at purus. Sed tristique arcu non dui auctor maximus. Praesent eget ante odio. Ut convallis tellus molestie, iaculis leo eget, rhoncus tellus. Suspendisse pharetra aliquet ex sit amet tincidunt. Nullam feugiat sed nulla vel volutpat. docs Esto lo agrego JD agregado por fabian","title":"About Cubepy"},{"location":"Functions/subset/","text":"Subset \u00b6 La estructura de la funci\u00f3n es la siguiente: result = subset(cube1) Devuelve una lista de todos los elementos del index para los que cube1 es verdadero. La funci\u00f3n se usa para crear un nuevo index que sea un subconjunto de un index existente. Ejemplo: result = cp.subset(cantidades>0)","title":"Subset"},{"location":"Functions/subset/#subset","text":"La estructura de la funci\u00f3n es la siguiente: result = subset(cube1) Devuelve una lista de todos los elementos del index para los que cube1 es verdadero. La funci\u00f3n se usa para crear un nuevo index que sea un subconjunto de un index existente. Ejemplo: result = cp.subset(cantidades>0)","title":"Subset"},{"location":"Objects/","text":"cp.index \u00b6 Crea un objeto index utilizando la lista de valores. La estructura de la funci\u00f3n es la siguiente: result = cp . index ( values ) Ejemplos: result = cp . index ([ \"Item 1\" , \"Item 2\" , \"Item 3\" ]) result = cp . index ([ 2016 , 2017 , 2018 ]) result = cp . index ([ \"item \" + str ( i + 1 ) for i in range ( 100 )]) Crear un indice a partir de filtrar elementos de una tabla que cumplen una condici\u00f3n: result = cp . index ( cp . subset ( input_data [ input_data_cols == 'Server' ] == 'dedicated' )) En este caso la tabla es input_data, la columna con los datos es \u2018Server\u2019 y el valor \u2018dedicated\u2019. El resultado es el listado de clientes cuyo Servidor es Dedicado.","title":"Index"},{"location":"Objects/#cpindex","text":"Crea un objeto index utilizando la lista de valores. La estructura de la funci\u00f3n es la siguiente: result = cp . index ( values ) Ejemplos: result = cp . index ([ \"Item 1\" , \"Item 2\" , \"Item 3\" ]) result = cp . index ([ 2016 , 2017 , 2018 ]) result = cp . index ([ \"item \" + str ( i + 1 ) for i in range ( 100 )]) Crear un indice a partir de filtrar elementos de una tabla que cumplen una condici\u00f3n: result = cp . index ( cp . subset ( input_data [ input_data_cols == 'Server' ] == 'dedicated' )) En este caso la tabla es input_data, la columna con los datos es \u2018Server\u2019 y el valor \u2018dedicated\u2019. El resultado es el listado de clientes cuyo Servidor es Dedicado.","title":"cp.index"},{"location":"Objects/cube/","text":"cp.cube \u00b6 Crea una matriz indexada por uno o m\u00e1s \u00edndices permitiendo asignarle un valor a cada elemento de dicho \u00edndice. La estructura de la funci\u00f3n es la siguiente: result = cp . cube ( axes , values = None , broadcast = True , dtype = None ) axes: lista de axis de la matriz values (opcional): Lista de valores de la matriz. Puede ser una lista de cubos para crear un reporte. Ejemplos: result = cp . cube ([ time ]) result = cp . cube ([ time , product ]) result = cp . cube ([ time , product ],[ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 ]) result = cp . cube ([ time , product ], cp . random ) Ejemplo para crear un reporte: result = cp . cube ([ index_reports ],[ report_1 , report_2 ])","title":"Cube"},{"location":"Objects/cube/#cpcube","text":"Crea una matriz indexada por uno o m\u00e1s \u00edndices permitiendo asignarle un valor a cada elemento de dicho \u00edndice. La estructura de la funci\u00f3n es la siguiente: result = cp . cube ( axes , values = None , broadcast = True , dtype = None ) axes: lista de axis de la matriz values (opcional): Lista de valores de la matriz. Puede ser una lista de cubos para crear un reporte. Ejemplos: result = cp . cube ([ time ]) result = cp . cube ([ time , product ]) result = cp . cube ([ time , product ],[ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 ]) result = cp . cube ([ time , product ], cp . random ) Ejemplo para crear un reporte: result = cp . cube ([ index_reports ],[ report_1 , report_2 ])","title":"cp.cube"}]}